// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.1
// source: proto/hello.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloClient is the client API for Hello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloClient interface {
	// 普通RPC
	Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
	// 服务端流RPC
	Sss(ctx context.Context, in *Req, opts ...grpc.CallOption) (Hello_SssClient, error)
	// 客户端流
	Css(ctx context.Context, opts ...grpc.CallOption) (Hello_CssClient, error)
	// 双向流
	Bs(ctx context.Context, opts ...grpc.CallOption) (Hello_BsClient, error)
}

type helloClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloClient(cc grpc.ClientConnInterface) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/hello.Hello/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) Sss(ctx context.Context, in *Req, opts ...grpc.CallOption) (Hello_SssClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hello_ServiceDesc.Streams[0], "/hello.Hello/Sss", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloSssClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hello_SssClient interface {
	Recv() (*Resp, error)
	grpc.ClientStream
}

type helloSssClient struct {
	grpc.ClientStream
}

func (x *helloSssClient) Recv() (*Resp, error) {
	m := new(Resp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloClient) Css(ctx context.Context, opts ...grpc.CallOption) (Hello_CssClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hello_ServiceDesc.Streams[1], "/hello.Hello/Css", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloCssClient{stream}
	return x, nil
}

type Hello_CssClient interface {
	Send(*Req) error
	CloseAndRecv() (*Resp, error)
	grpc.ClientStream
}

type helloCssClient struct {
	grpc.ClientStream
}

func (x *helloCssClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloCssClient) CloseAndRecv() (*Resp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Resp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloClient) Bs(ctx context.Context, opts ...grpc.CallOption) (Hello_BsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hello_ServiceDesc.Streams[2], "/hello.Hello/Bs", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloBsClient{stream}
	return x, nil
}

type Hello_BsClient interface {
	Send(*Req) error
	Recv() (*Resp, error)
	grpc.ClientStream
}

type helloBsClient struct {
	grpc.ClientStream
}

func (x *helloBsClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloBsClient) Recv() (*Resp, error) {
	m := new(Resp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServer is the server API for Hello service.
// All implementations must embed UnimplementedHelloServer
// for forward compatibility
type HelloServer interface {
	// 普通RPC
	Ping(context.Context, *Req) (*Resp, error)
	// 服务端流RPC
	Sss(*Req, Hello_SssServer) error
	// 客户端流
	Css(Hello_CssServer) error
	// 双向流
	Bs(Hello_BsServer) error
	mustEmbedUnimplementedHelloServer()
}

// UnimplementedHelloServer must be embedded to have forward compatible implementations.
type UnimplementedHelloServer struct {
}

func (UnimplementedHelloServer) Ping(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedHelloServer) Sss(*Req, Hello_SssServer) error {
	return status.Errorf(codes.Unimplemented, "method Sss not implemented")
}
func (UnimplementedHelloServer) Css(Hello_CssServer) error {
	return status.Errorf(codes.Unimplemented, "method Css not implemented")
}
func (UnimplementedHelloServer) Bs(Hello_BsServer) error {
	return status.Errorf(codes.Unimplemented, "method Bs not implemented")
}
func (UnimplementedHelloServer) mustEmbedUnimplementedHelloServer() {}

// UnsafeHelloServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloServer will
// result in compilation errors.
type UnsafeHelloServer interface {
	mustEmbedUnimplementedHelloServer()
}

func RegisterHelloServer(s grpc.ServiceRegistrar, srv HelloServer) {
	s.RegisterService(&Hello_ServiceDesc, srv)
}

func _Hello_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.Hello/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).Ping(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_Sss_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Req)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServer).Sss(m, &helloSssServer{stream})
}

type Hello_SssServer interface {
	Send(*Resp) error
	grpc.ServerStream
}

type helloSssServer struct {
	grpc.ServerStream
}

func (x *helloSssServer) Send(m *Resp) error {
	return x.ServerStream.SendMsg(m)
}

func _Hello_Css_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServer).Css(&helloCssServer{stream})
}

type Hello_CssServer interface {
	SendAndClose(*Resp) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type helloCssServer struct {
	grpc.ServerStream
}

func (x *helloCssServer) SendAndClose(m *Resp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloCssServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hello_Bs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServer).Bs(&helloBsServer{stream})
}

type Hello_BsServer interface {
	Send(*Resp) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type helloBsServer struct {
	grpc.ServerStream
}

func (x *helloBsServer) Send(m *Resp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloBsServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Hello_ServiceDesc is the grpc.ServiceDesc for Hello service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hello_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hello.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Hello_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sss",
			Handler:       _Hello_Sss_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Css",
			Handler:       _Hello_Css_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Bs",
			Handler:       _Hello_Bs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/hello.proto",
}
