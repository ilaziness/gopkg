// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/rpc.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AsRpcClient is the client API for AsRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AsRpcClient interface {
	Test(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
}

type asRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewAsRpcClient(cc grpc.ClientConnInterface) AsRpcClient {
	return &asRpcClient{cc}
}

func (c *asRpcClient) Test(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/api.AsRpc/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsRpcServer is the server API for AsRpc service.
// All implementations must embed UnimplementedAsRpcServer
// for forward compatibility
type AsRpcServer interface {
	Test(context.Context, *Req) (*Resp, error)
	mustEmbedUnimplementedAsRpcServer()
}

// UnimplementedAsRpcServer must be embedded to have forward compatible implementations.
type UnimplementedAsRpcServer struct {
}

func (UnimplementedAsRpcServer) Test(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedAsRpcServer) mustEmbedUnimplementedAsRpcServer() {}

// UnsafeAsRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AsRpcServer will
// result in compilation errors.
type UnsafeAsRpcServer interface {
	mustEmbedUnimplementedAsRpcServer()
}

func RegisterAsRpcServer(s grpc.ServiceRegistrar, srv AsRpcServer) {
	s.RegisterService(&AsRpc_ServiceDesc, srv)
}

func _AsRpc_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsRpcServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AsRpc/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsRpcServer).Test(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// AsRpc_ServiceDesc is the grpc.ServiceDesc for AsRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AsRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AsRpc",
	HandlerType: (*AsRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _AsRpc_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/rpc.proto",
}

// BsRpcClient is the client API for BsRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BsRpcClient interface {
	Test(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
}

type bsRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewBsRpcClient(cc grpc.ClientConnInterface) BsRpcClient {
	return &bsRpcClient{cc}
}

func (c *bsRpcClient) Test(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/api.BsRpc/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BsRpcServer is the server API for BsRpc service.
// All implementations must embed UnimplementedBsRpcServer
// for forward compatibility
type BsRpcServer interface {
	Test(context.Context, *Req) (*Resp, error)
	mustEmbedUnimplementedBsRpcServer()
}

// UnimplementedBsRpcServer must be embedded to have forward compatible implementations.
type UnimplementedBsRpcServer struct {
}

func (UnimplementedBsRpcServer) Test(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedBsRpcServer) mustEmbedUnimplementedBsRpcServer() {}

// UnsafeBsRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BsRpcServer will
// result in compilation errors.
type UnsafeBsRpcServer interface {
	mustEmbedUnimplementedBsRpcServer()
}

func RegisterBsRpcServer(s grpc.ServiceRegistrar, srv BsRpcServer) {
	s.RegisterService(&BsRpc_ServiceDesc, srv)
}

func _BsRpc_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BsRpcServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BsRpc/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BsRpcServer).Test(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// BsRpc_ServiceDesc is the grpc.ServiceDesc for BsRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BsRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.BsRpc",
	HandlerType: (*BsRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _BsRpc_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/rpc.proto",
}
